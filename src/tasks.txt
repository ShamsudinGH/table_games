GamerRepository
1) Реализовать сущность Gamer
2) Реализовать репозиторий для Gamer (найти, список, добавить, блокировка)
3) Связать User и Gamer


UserRepository
1) Добавить метод блокировки, который будешь вызывать из GamerRepository

--------------------------
1) Добавить явное указание возвращаемого типа для всех репозиториев
2) Роль пользователя указывать в users.json
3) Реализовать GameRepository

--------------------------
+1) Перенести приватные методы ниже публичных
+2) Добавить проверку на бан при авторизации
+3) Реализовать меню игрока (либо через состояния, либо без них)
4) Добить UserPanel (стейты) отображение(визуальная часть)
    +4.1) Для игр выводить в формате: id. game_name - game_price
    +4.2) Для игроков выводить в формате: id. nickname
5) Реализовать AdminPanel (Полностью "Игры - отображает список игр", "Профиль", "Выход")

--------------------------
+ 1) Редактировать добавление копии игры
2) -Доделать Админ Игроки(Бан пользователя), +Профиль
3) Глобально Разлогинить пользователя (открыть экран авторизации (новый стейт))
__________________________

1) +Обновить стейты (Возвращаемые названия (get_name)) User_, Admin_
2) +Объединить 2 source_destination_map (админ и юзер в одну мапу)
3) +Доделать Админ Игроки
+ 4) Глобально Разлогинить пользователя (открыть экран авторизации (новый стейт))

__________________________

Реализовать логику автоматического разлогина при смене стейта, если время сессии закончилось
1) В переменной храним текущее время
2) На каждой операции проверять текущее время и время которое сохранили ранее
3) Нужен еще один класс с проверкой

__________________________

-------------------------- ГЛОБАЛЬНЫЕ ПРАВКИ --------------------------
1) Упростить source_destinations_map: dict[str, list[str]] = {} до source_destinations_map: dict[State, list[State]] = {}
2) Сделать AuthManager секьюрным
    2.1) Реализовать логику автоматического разлогина при смене стейта, если время сессии закончилось
    2.2) Добавить шифрование
3) Перевести Database на SQL